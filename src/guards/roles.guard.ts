import { Injectable, CanActivate, ExecutionContext, ForbiddenException } from '@nestjs/common';
import { Reflector } from '@nestjs/core';
import { ROLES_KEY } from '../decorators/roles.decorator';
import { IS_PUBLIC_KEY } from '../decorators/public.decorator';

@Injectable()
export class RolesGuard implements CanActivate {
  constructor(private reflector: Reflector) {}

  canActivate(context: ExecutionContext): boolean {
    console.log('üîí [RolesGuard] Verificando permiss√µes...');

    // Verifica se a rota √© p√∫blica
    const isPublic = this.reflector.getAllAndOverride<boolean>(IS_PUBLIC_KEY, [
      context.getHandler(),
      context.getClass(),
    ]);

    console.log('üìç [RolesGuard] √â p√∫blica?', isPublic);

    if (isPublic) {
      console.log('‚úÖ [RolesGuard] Rota p√∫blica, liberando...');
      return true;
    }

    // Pega o usu√°rio da requisi√ß√£o
    const { user } = context.switchToHttp().getRequest();
    console.log('üë§ [RolesGuard] User payload:', user);

    if (!user || !user.role) {
      console.log('‚ùå [RolesGuard] Usu√°rio sem role!');
      throw new ForbiddenException('Usu√°rio sem permiss√£o definida');
    }

    // Pega as roles necess√°rias do decorator @Roles()
    const requiredRoles = this.reflector.getAllAndOverride<string[]>(ROLES_KEY, [
      context.getHandler(),
      context.getClass(),
    ]);

    console.log('üîë [RolesGuard] Roles necess√°rias:', requiredRoles);
    console.log('üë§ [RolesGuard] Role do usu√°rio:', user.role);

    // Se n√£o tem @Roles() definido, bloqueia (como voc√™ configurou)
    if (!requiredRoles || requiredRoles.length === 0) {
      console.log('‚ùå [RolesGuard] Rota sem roles definidas!');
      throw new ForbiddenException('Rota sem permiss√µes definidas');
    }

    // Verifica se o usu√°rio tem alguma das roles necess√°rias
    const hasRole = requiredRoles.some((role) => user.role === role);
    console.log('‚úÖ [RolesGuard] Tem permiss√£o?', hasRole);

    if (!hasRole) {
      console.log('üö´ [RolesGuard] Acesso negado!');
      throw new ForbiddenException(
        `Acesso negado. Voc√™ √©: ${user.role}. Necess√°rio: ${requiredRoles.join(' ou ')}`
      );
    }

    console.log('‚úÖ [RolesGuard] Acesso liberado!');
    return true;
  }
}
